#include<iostream>
#include<string.h>
#include<algorithm>
using namespace std;
const int MAX = 1001;
int D[MAX][MAX];
int max(int a, int b){
	if(a>b) return a;
	else return b;
} 
int LCS(string s, string rs){
	int i,j;
	int length1= s.size();
	int length2= rs.size();
	for(i=0;i<=length1;i++){//初始化二维数组，当i=0|j=0,D[i][j]=0,这里0代表无元素 
		D[i][0]=0;
	}
	for(j=0;j<=length2;j++){
		D[0][j]=0;//D数组保存最优解，大小为D[i][j] 
	} 
	for(i=1;i<=length1;i++){//根据上面的初始值，自底向上求其他值 
		for(j=1;j<=length2;j++){
			if(s[i-1]==rs[j-1]){//字符数组从0开始存储数据 
				D[i][j]=D[i-1][j-1]+1;
			}
			else{
				D[i][j]=max(D[i-1][j],D[i][j-1]);
			}
		}
	}
	return D[length1][length2]; 
}
int main(){
	string s,rs;
	while(cin>>s){
		rs=s;
		reverse(rs.begin(),rs.end());
		int count=s.size();
		cout<<count-LCS(s,rs)<<endl;
	}
	return 0;
}
